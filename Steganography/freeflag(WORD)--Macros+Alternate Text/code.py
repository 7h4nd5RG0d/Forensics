def xor_bytes(input_bytes, key):
    return bytearray([b ^ key for b in input_bytes])

alternative_text = "21,121,114,49,23,101,109,49,9,122,37,121,38,121,104,57,4,120,97,116,71,95,107,34,10,125,96,121,38,121,104,57,4,120,97,116,72,69,102,38,12,102,113,22,9,121,102,63,69,109,33,98,2,79,108,22,4,92,107,0,52,117,72,21,55,111,37,105,69,74,39,101,92,36,43,101,83,46,43,97,83,56,52,8,71,45,33,16,39,80,114,39,18,126,98,13,46,120,70,35,29,92,37,105,69,62,52,102,86,47,50,96,69,59,37,101,80,36,53,103,85,54,46,116,87,46,61,99,81,54,46,116,80,39,60,125,94,50,66,4,8,122,72,96,44,33,73,2,54,67,74,109,17,54,56,116,77,74,39,47,86,107,126,101,24,109,49,41,30,35,120,47,85,107,126,102,24,74,39,121,3,49,97,97,66,58,34,48,92,49,41,115,1,36,34,120,66,114,60,115,73,49,97,49,66,58,34,55,92,49,44,111,65,47,61,1,29,65,71,1,93,119,92,96,42,92,67,30,69,43,37,15,54,111,118,32,0,123,43,0,0,110,113,122,32,120,102,59,1,127,107,51,56,44,63,1,49,80,61,111,3,99,107,55,17,127,106,58,69,91,71,109,32,68,83,50,92,100,108,26,55,123,112,35,69,109,117,53,23,119,104,116,77,77,103,45,17,115,94,9,56,54,33,32,15,124,104,101,29,79,98,96,31,92,108,58,51,95,44,111,65,82,93,6,33,64,54,19,47,115,64,99,2,121,107,49,69,43,37,26,0,97,40,27,7,124,96,55,17,54,103,45,17,115,94,9,69,50,113,62,15,123,52,44,60,113,49,46,47,127,107,2,44,56,73,49,11,113,113,60,94,50,113,97,18,92,87,13,9,99,111,99,1,38,108,49,51,54,56,116,84,37,62,50,10,100,37,124,65,67,66,16,13,126,74,54,20,117,52,18,47,39,83,63,69,43,37,100,94,54,33,1,34,82,109,60,42,116,116,55,84,80,79,101,51,125,37,121,9,98,37,112,17,124,111,57,84,110,92,51,81,108,79,61,11,64,76,122,41,115,107,51,17,126,62,112,48,81,65,60,13,89,103,37,6,39,67,30,84,64,110,127,78,63,37,47,65,82,93,6,33,64,54,19,47,115,64,99,2,121,107,49,62,50,80,19,33,126,109,27,7,103,102,101,35,92,52,2,14,75,37,105,69,50,113,62,15,123,52,44,60,113,49,46,47,127,107,2,44,77,33,1,34,82,109,60,42,116,116,55,84,80,79,101,51,125,88,116,72,116,125,59,23,54,33,32,80,97,79,6,60,122,112,62,82,114,53,61,0,64,62,112,17,35,114,30,55,79,105,33,15,33,97,100,12,115,83,116,88,54,33,32,80,97,79,6,60,122,112,62,82,114,53,61,0,64,37,121,7,110,106,38,69,37,50,116,72,116,125,59,23,54,45,112,48,81,65,60,13,89,103,37,6,39,67,30,84,64,110,116,64,54,53,44,39,84,44,116,24,45,119,49,17,99,119,58,69,50,65,12,55,82,83,103,34,92,96,17,82,113,106,58,0,107,62,15,7,111,113,49,62,75,88,116,65,80,67,36,20,123,86,18,4,116,109,58,22,36,61,102,69,43,37,98,82,58,48,108,73,47,55,120,93,33,41,101,85,35,41,101,84,38,41,101,85,38,41,101,84,39,41,101,84,47,41,101,84,35,41,109,87,58,50,99,73,39,53,97,73,47,60,120,84,39,49,120,84,39,52,120,84,39,48,120,84,39,52,120,84,38,55,120,84,39,51,120,81,32,41,99,93,58,51,109,73,46,49,120,92,36,41,99,85,58,52,101,81,58,60,99,73,39,53,109,73,39,53,101,73,39,52,109,73,39,52,101,73,39,52,96,73,39,53,99,94,50,93,37,21,94,51,37,6,126,127,5,31,110,100,29,9,54,56,116,77,113,102,61,69,62,33,109,93,67,125,3,39,67,61,53,60,34,74,30,35,92,43,19,0,98,86,32,23,127,107,51,77,50,67,18,21,103,104,7,35,119,103,60,11,101,55,108,87,63,44,116,72,68,37,121,35,127,37,124,57,52,126,96,24,109,51,41,30,39,120,47,86,107,126,97,24,109,55,41,30,38,120,8,71,54,40,50,69,49,96,115,73,49,102,115,73,49,125,115,73,49,43,115,73,49,102,115,73,49,96,115,73,49,118,115,76,63,62,61,3,54,45,112,11,99,105,56,69,59,96,37,69,50,93,37,21,94,51,37,6,126,127,5,31,110,100,29,9,56,64,44,12,101,113,39,76,54,126,49,29,127,113,41,69,115,105,39,0,54,126,112,61,103,117,28,83,103,102,60,31,71,127,44,4,95,105,116,88,54,33,12,20,102,77,98,20,117,109,46,52,108,125,53,44,122,43,18,16,122,105,26,4,123,96,41,94,50,81,13,51,110,71,61,54,88,50,24,60,70,52,22,86,54,56,116,77,127,114,38,69,74,39,112,30,32,98,13,12,84,100,30,11,66,84,55,40,87,87,45,24,44,33,47,33,84,67,35,22,97,109,51,60,93,107,23,18,110,79,41,74,50,126,19,53,123,105,25,81,95,50,24,51,69,80,27,92,98,120,8,71,54,40,1,22,115,71,53,22,127,102,4,4,100,118,61,11,113,44,122,38,121,107,32,0,120,113,111,65,66,92,2,29,84,108,7,43,33,73,13,53,39,71,103,69,43,37,25,39,47,64,6,51,112,60,38,12,88,87,57,16,97,37,112,49,79,83,44,39,127,86,26,82,90,92,4,84,84,54,111,65,32,99,26,38,82,64,53,35,123,71,109,9,117,74,51,69,43,37,8,71,50,126,17,11,96,63,0,32,91,85,41,57,115,100,109,93,117,111,57,0,74,39,111,65,80,103,4,44,82,74,98,85,121,100,58,20,82,50,63,69,43,37,8,71,57,106,33,17,44,33,47,32,120,115,110,49,83,72,4,24,74,96,53,92,46,102,62,8,115,43,49,29,115,89,118,94,69,96,32,72,85,106,58,17,115,107,32,69,59,85,53,17,126,37,112,83,112,75,23,33,83,100,18,8,84,60,56,6,89,98,116,72,64,100,56,16,115,37,112,49,79,83,44,39,127,86,26,82,90,92,4,84,84,54,116,72,83,107,55,10,114,108,58,2,54,71,45,17,115,37,121,43,121,75,49,18,122,108,58,0,45,35,116,65,78,116,36,45,32,116,55,13,108,84,46,29,119,76,56,69,50,67,54,53,95,65,27,83,38,106,53,11,103,65,99,14,54,33,98,3,88,70,16,32,119,67,57,39,47,105,55,42,113,62,114,69,74,39,112,30,83,107,34,95,66,64,25,53,107,89,49,4,47,61,55,15,123,96,122,0,110,96,8,71,45,119,57,69,50,51,50,43,85,65,17,4,80,104,22,92,122,102,27,2,107,39"

# Step 2: Conversion to Byte Array
byte_values = [int(x) for x in alternative_text.split(',')]
input_bytes = bytearray(byte_values)

# Step 3: XOR with repeating pattern and constant value
xor_key = bytearray([0xDE, 0xAD, 0xBE, 0xEF])
processed_bytes = bytearray([input_bytes[i] ^ xor_key[i % 4] for i in range(len(input_bytes))])
processed_bytes = xor_bytes(processed_bytes, 0xBB)

# Step 4: Decoding to String
decoded_string = processed_bytes.decode('utf-8', errors='ignore')  # Decode, ignoring non-UTF-8 bytes
print(decoded_string)



   
